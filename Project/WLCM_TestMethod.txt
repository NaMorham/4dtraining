//%attributes = {"lang":"en"} comment added and reserved by 4D.//Project Method: WLCM_TestMethod////   Parameter        Type             Description////Description://   ////Date        Init  Description//===============================================================================//19/05/2017   AH   Initial version.//Project Method: Welcome.testFuncs_Btn////   Parameter        Type             Description////Description://   ////Date        Init  Description//===============================================================================//02/05/2017   AH   Initial version.DBG_BeginMethod (Current method name)C_DATE($vD_testDate;$vD_NoDate)C_TEXT($vT_testText)C_BOOLEAN($vB_testBool)C_LONGINT($vL_testLong;$vl_testIndex)$vD_NoDate:=!00/00/0000!DebugLog ("Test normal date parser with reverse date YYYY/MM/DD")// Test 1 - reverse date, normal parser$vT_testText:="2017-02-24"$vD_testDate:=Date($vT_testText)If ($vD_testDate#$vD_NoDate)ALERT("Test Failed: Should not be able to parse ["+$vT_testText+"]")End if DebugLog ("Test reverse date parser with reverse date YYYY/MM/DD")$vD_testDate:=ReverseDateStringToDate ($vT_testText)If ($vD_testDate=$vD_NoDate)ALERT("Failed to convert reverse date string ["+$vT_testText+"]")End if //ARRAY TEXT($aT_testArray;0;2)//C_LONGINT($vL_index)//For ($vL_index;1;10)//$vL_testIndex:=Size of array($aT_testArray)+1//INSERT IN ARRAY($aT_testArray;$vl_testIndex)//DebugLog ("$vL_testIndex = ["+String($vL_testIndex)+"]")//$vL_testLong:=RandomRange (10)//DebugLog ("Test random: 1st number 0<=x<=10 ["+String($vL_testLong)+"]")//$aT_testArray{$vL_testIndex}{1}:=String($vL_testLong)//DebugLog ("$vL_testIndex = ["+String($vL_testIndex)+"]")//$vL_testLong:=RandomRange (10;20)//DebugLog ("Test random: 1st number 10<=x<=20 ["+String($vL_testLong)+"]")//$aT_testArray{$vL_testIndex}{2}:=String($vL_testLong)//End for //For ($vL_index;1;10)//If ($aT_testArray{$vL_index}=String(4))//DebugLog ("4 found")//End if //End for// Declare arrayARRAY LONGINT($aL_testArray;0)C_LONGINT($vL_testArraySize;$vL_index;$vL_expectedSize)$vL_expectedSize:=0$vL_testArraySize:=Size of array($aL_testArray)DebugLog ("After construction size 0, reported size = ["+String($vL_testArraySize)+"]")If ($vL_testArraySize#0)DebugLog ("test array size is not 0")End if // add some stuff using appendC_LONGINT($vL_numToAdd)$vL_numToAdd:=RandomRange (1;10)$vL_expectedSize:=$vL_numToAddFor ($vL_index;1;$vL_numToAdd)APPEND TO ARRAY($aL_testArray;RandomRange (1;21)-11)DebugLog ("("+String($vL_index;"##")+"/"+String($vL_expectedSize;"##")+") added new value ["+String($aL_testArray{$vL_index})+"]")End for $vL_testArraySize:=Size of array($aL_testArray)DebugLog ("After appending "+String($vL_numToAdd)+" items, reported size = ["+String($vL_testArraySize)+"]")If ($vL_testArraySize#$vL_expectedSize)DebugLog ("test array size is incorrect ["+String($vL_testArraySize)+" != "+String($vL_numToAdd)+"]")End if // resize up and check sizes$vL_numToAdd:=(RandomRange (0;10)+5)C_LONGINT($vL_oldSize)$vL_oldSize:=$vL_expectedSize$vL_expectedSize:=$vL_expectedSize+$vL_numToAdd// this should increase the size of the existing arrayARRAY LONGINT($aL_testArray;$vL_expectedSize)DebugLog ("Resize test array to size ["+String($vL_expectedSize)+"]")For ($vL_index;1;$vL_numToAdd)If ($vL_index>$vL_oldSize)$aL_testArray{$vL_index}:=RandomRange (1;21)-11DebugLog ("("+String($vL_index;"##")+"/"+String($vL_expectedSize;"##")+") added new value ["+String($aL_testArray{$vL_index})+"]")Else DebugLog ("("+String($vL_index;"##")+"/"+String($vL_expectedSize;"##")+") existing value ["+String($aL_testArray{$vL_index})+"]")End if End for $vL_testArraySize:=Size of array($aL_testArray)DebugLog ("After resizing to "+String($vL_expectedSize)+" items, reported size = ["+String($vL_testArraySize)+"]")If ($vL_testArraySize#$vL_expectedSize)DebugLog ("test array size is incorrect ["+String($vL_testArraySize)+" != "+String($vL_numToAdd)+"]")End if // this should decrease the size of the existing array$vL_expectedSize:=2ARRAY LONGINT($aL_testArray;$vL_expectedSize)$vL_oldSize:=$vL_testArraySize$vL_numToAdd:=-($vL_oldSize-$vL_expectedSize)DebugLog ("Resize test array to size ["+String($vL_expectedSize)+"]")For ($vL_index;1;$vL_expectedSize)DebugLog ("("+String($vL_index;"##")+"/"+String($vL_expectedSize;"##")+") found value ["+String($aL_testArray{$vL_index})+"]")End for $vL_testArraySize:=Size of array($aL_testArray)DebugLog ("After resizing to "+String($vL_expectedSize)+" items, reported size = ["+String($vL_testArraySize)+"]")If ($vL_testArraySize#$vL_expectedSize)DebugLog ("test array size is incorrect ["+String($vL_testArraySize)+" != "+String($vL_numToAdd)+"]")End if DebugLog ("Test done")DBG_EndMethod 