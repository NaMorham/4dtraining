  //%attributes = {"lang":"en"} comment added and reserved by 4D.  //Project Method: WLCM_TestMethod  //  //   Parameter        Type             Description  //  //Description:  //     //  //Date        Init  Description  //===============================================================================  //19/05/2017   AH   Initial version.  //Project Method: Welcome.testFuncs_Btn  //  //   Parameter        Type             Description  //  //Description:  //     //  //Date        Init  Description  //===============================================================================  //02/05/2017   AH   Initial version.DBG_BeginMethod (Current method name)C_BOOLEAN($vB_testArrays;$vB_testDateParser;$vB_testObjectJSON)$vB_testArrays:=True$vB_testDateParser:=True$vB_testObjectJSON:=TrueIf ($vB_testDateParser)	C_DATE($vD_testDate;$vD_NoDate)	C_TEXT($vT_testText)	C_BOOLEAN($vB_testBool)	C_LONGINT($vL_testLong;$vl_testIndex)		$vD_NoDate:=!00-00-00!	DBG_Log ("--------------------------------------------------------")	DBG_Log ("Test normal date parser with reverse date YYYY/MM/DD")	  // Test 1 - reverse date, normal parser	$vT_testText:="2017-02-24"	$vD_testDate:=Date($vT_testText)	If ($vD_testDate#$vD_NoDate)		ALERT("Test Failed: Should not be able to parse ["+$vT_testText+"]")	End if 		DBG_Log ("Test reverse date parser with reverse date YYYY/MM/DD")	$vD_testDate:=ReverseDateStringToDate ($vT_testText)	If ($vD_testDate=$vD_NoDate)		ALERT("Failed to convert reverse date string ["+$vT_testText+"]")	End if End if If ($vB_testArrays)	DBG_Log ("--------------------------------------------------------")	  //ARRAY TEXT($aT_testArray;0;2)	  //C_LONGINT($vL_index)		  //For ($vL_index;1;10)	  //$vL_testIndex:=Size of array($aT_testArray)+1	  //INSERT IN ARRAY($aT_testArray;$vl_testIndex)		  //DBG_Log ("$vL_testIndex = ["+String($vL_testIndex)+"]")	  //$vL_testLong:=RandomRange (10)	  //DBG_Log ("Test random: 1st number 0<=x<=10 ["+String($vL_testLong)+"]")	  //$aT_testArray{$vL_testIndex}{1}:=String($vL_testLong)		  //DBG_Log ("$vL_testIndex = ["+String($vL_testIndex)+"]")	  //$vL_testLong:=RandomRange (10;20)	  //DBG_Log ("Test random: 1st number 10<=x<=20 ["+String($vL_testLong)+"]")	  //$aT_testArray{$vL_testIndex}{2}:=String($vL_testLong)	  //End for 		  //For ($vL_index;1;10)	  //If ($aT_testArray{$vL_index}=String(4))	  //DBG_Log ("4 found")	  //End if 	  //End for		  // Declare array	ARRAY LONGINT($aL_testArray;0)	C_LONGINT($vL_testArraySize;$vL_index;$vL_expectedSize)		$vL_expectedSize:=0	$vL_testArraySize:=Size of array($aL_testArray)		DBG_Log ("After construction size 0, reported size = ["+String($vL_testArraySize)+"]")	If ($vL_testArraySize#0)		DBG_Log ("test array size is not 0")	End if 		  // add some stuff using append	C_LONGINT($vL_numToAdd)		$vL_numToAdd:=RandomRange (1;10)	$vL_expectedSize:=$vL_numToAdd		For ($vL_index;1;$vL_numToAdd)		APPEND TO ARRAY($aL_testArray;RandomRange (1;21)-11)		DBG_Log ("("+String($vL_index;"##")+"/"+String($vL_expectedSize;"##")+") added new value ["+String($aL_testArray{$vL_index})+"]")	End for 		$vL_testArraySize:=Size of array($aL_testArray)	DBG_Log ("After appending "+String($vL_numToAdd)+" items, reported size = ["+String($vL_testArraySize)+"]")	If ($vL_testArraySize#$vL_expectedSize)		DBG_Log ("test array size is incorrect ["+String($vL_testArraySize)+" != "+String($vL_numToAdd)+"]")	End if 		  // resize up and check sizes	$vL_numToAdd:=(RandomRange (0;10)+5)	C_LONGINT($vL_oldSize)	$vL_oldSize:=$vL_expectedSize	$vL_expectedSize:=$vL_expectedSize+$vL_numToAdd		  // this should increase the size of the existing array	ARRAY LONGINT($aL_testArray;$vL_expectedSize)	DBG_Log ("Resize test array to size ["+String($vL_expectedSize)+"]")		For ($vL_index;1;$vL_numToAdd)		If ($vL_index>$vL_oldSize)			$aL_testArray{$vL_index}:=RandomRange (1;21)-11			DBG_Log ("("+String($vL_index;"##")+"/"+String($vL_expectedSize;"##")+") added new value ["+String($aL_testArray{$vL_index})+"]")		Else 			DBG_Log ("("+String($vL_index;"##")+"/"+String($vL_expectedSize;"##")+") existing value ["+String($aL_testArray{$vL_index})+"]")		End if 	End for 		$vL_testArraySize:=Size of array($aL_testArray)	DBG_Log ("After resizing to "+String($vL_expectedSize)+" items, reported size = ["+String($vL_testArraySize)+"]")	If ($vL_testArraySize#$vL_expectedSize)		DBG_Log ("test array size is incorrect ["+String($vL_testArraySize)+" != "+String($vL_numToAdd)+"]")	End if 		  // this should decrease the size of the existing array	$vL_expectedSize:=2	ARRAY LONGINT($aL_testArray;$vL_expectedSize)	$vL_oldSize:=$vL_testArraySize	$vL_numToAdd:=-($vL_oldSize-$vL_expectedSize)		DBG_Log ("Resize test array to size ["+String($vL_expectedSize)+"]")		For ($vL_index;1;$vL_expectedSize)		DBG_Log ("("+String($vL_index;"##")+"/"+String($vL_expectedSize;"##")+") found value ["+String($aL_testArray{$vL_index})+"]")	End for 		$vL_testArraySize:=Size of array($aL_testArray)	DBG_Log ("After resizing to "+String($vL_expectedSize)+" items, reported size = ["+String($vL_testArraySize)+"]")	If ($vL_testArraySize#$vL_expectedSize)		DBG_Log ("test array size is incorrect ["+String($vL_testArraySize)+" != "+String($vL_numToAdd)+"]")	End if End if If ($vB_testObjectJSON)	DBG_Log ("--------------------------------------------------------")	DBG_Log ("Object/JSON tests")		C_TEXT($vT_testJSON)	$vT_testJSON:="{ \"extractedConstants\": ["	$vT_testJSON:=$vT_testJSON+" {\"groupname\": \"C1\",\"Constants\": ["	$vT_testJSON:=$vT_testJSON+" {\"name\": \"test1\",\"value\": \"v1\"},"	$vT_testJSON:=$vT_testJSON+" {\"name\": \"test2\",\"value\": \"v2\"},"	$vT_testJSON:=$vT_testJSON+" {\"name\": \"test3\",\"value\": \"v3\"} ] },"	$vT_testJSON:=$vT_testJSON+" {\"groupname\": \"C2\",\"Constants\": ["	$vT_testJSON:=$vT_testJSON+" {\"name\": \"test1\",\"value\": \"v4\"},"	$vT_testJSON:=$vT_testJSON+" {\"name\": \"test2\",\"value\": \"v5\"} ] }"	$vT_testJSON:=$vT_testJSON+" ] }"		DBG_Log ("Create object from JSON <<<"+$vT_testJSON+">>>")	C_OBJECT($vO_testObj1)	$vO_testObj1:=JSON Parse($vT_testJSON)		ARRAY OBJECT($aO_extractedData;0)	OB GET ARRAY($vO_testObj1;"extractedConstants";$aO_extractedData)		C_LONGINT($vL_index)		ARRAY TEXT($aT_c1Names;0)	ARRAY TEXT($aT_c1Values;0)	ARRAY TEXT($aT_c2Names;0)	ARRAY TEXT($aT_c2Values;0)	C_POINTER($vP_aT_names;$vP_aT_values)	C_BOOLEAN($vB_continue)		For ($vL_index;1;Size of array($aO_extractedData))		DBG_Log ("["+String($vL_index)+"/"+String(Size of array($aO_extractedData))+"] Procecss Object <<<"+JSON Stringify($aO_extractedData{$vL_index})+">>>")				$vB_continue:=True				  // get the group name		C_TEXT($vT_groupName)		$vT_groupName:=OB Get($aO_extractedData{$vL_index};"groupname")		DBG_Log ("Found \"groupname\": \""+$vT_groupName+"\"")				Case of 			: ($vT_groupName="C1")				$vP_aT_names:=->$aT_c1Names				$vP_aT_values:=->$aT_c1Values							: ($vT_groupName="C2")				$vP_aT_names:=->$aT_c2Names				$vP_aT_values:=->$aT_c2Values							Else 				DBG_Log ("Unknown group ["+$vT_groupName+"] - skipping")				$vB_continue:=False						End case 				If ($vB_continue)			  // now the actual values			ARRAY OBJECT($aO_c1;0)						If (Not(OB Is defined($aO_extractedData{$vL_index};"Constants")))				DBG_Log ("Constants are not defined for group ["+$vT_groupName+"]")			Else 				OB GET ARRAY($aO_extractedData{$vL_index};"Constants";$aO_c1)								  // should now have an array ov name value objects				C_LONGINT($vL_valIndex)				For ($vL_valIndex;1;Size of array($aO_c1))					DBG_Log ("["+String($vL_valIndex)+"/"+String(Size of array($aO_c1))+"] Process entry ["+JSON Stringify($aO_c1{$vL_valIndex})+"]")					Case of 						: (Not(OB Is defined($aO_c1{$vL_valIndex};"name")))							DBG_Log ("No name defined")													: (Not(OB Is defined($aO_c1{$vL_valIndex};"value")))							DBG_Log ("No value defined")													Else 							APPEND TO ARRAY($vP_aT_names->;OB Get($aO_c1{$vL_valIndex};"name"))							APPEND TO ARRAY($vP_aT_values->;OB Get($aO_c1{$vL_valIndex};"value"))												End case 									End for 							End if 					End if 			End for 		  // second test	  // scarey string	  // $vT_testJSON="{ \"extractedConstants\" : [ { \"groupname\": \"Form Events\", \"Constants\": [ { \"value\": \"1\", \"label\": \"On Load\" }, { \"value\": \"2\", \"label\": \"On Mouse Up\" }, { \"value\": \"3\", \"label\": \"On Validate\" }, { \"value\": \"4\", \"label\": \"On Clicked\" }, { \"value\": \"5\","+"\"label\": \"On Header\" }, { \"value\": \"6\", \"label\": \"On Printing Break\" }, { \"value\": \"7\", \"label\": \"On Printing Footer\" }, { \"value\": \"8\", \"label\": \"On Display Detail\" }, { \"value\": \"10\", \"label\": \"On Outside Call\" }, { \"value\": \"11\", \"label\": \"On Activ"+"ate\" }, { \"value\": \"12\", \"label\": \"On Deactivate\" }, { \"value\": \"13\", \"label\": \"On Double Clicked\" }, { \"value\": \"14\", \"label\": \"On Losing Focus\" }, { \"value\": \"15\", \"label\": \"On Getting Focus\" }, { \"value\": \"16\", \"label\": \"On Drop\" }, { \"value\": \"17"+", \"label\": \"On Before Keystroke\" }, { \"value\": \"18\", \"label\": \"On Menu Selected\" }, { \"value\": \"19\", \"label\": \"On Plug in Area\" }, { \"value\": \"20\", \"label\": \"On Data Change\" }, { \"value\": \"21\", \"label\": \"On Drag Over\" }, { \"value\": \"22\", \"label\": \"On "+"Close Box\" }, { \"value\": \"23\", \"label\": \"On Printing Detail\" }, { \"value\": \"24\", \"label\": \"On Unload\" }, { \"value\": \"25\", \"label\": \"On Open Detail\" }, { \"value\": \"26\", \"label\": \"On Close Detail\" }, { \"value\": \"27\", \"label\": \"On Timer\" }, { \"value\": \""+"8\", \"label\": \"On After Keystroke\" }, { \"value\": \"29\", \"label\": \"On Resize\" }, { \"value\": \"30\", \"label\": \"On After Sort\" }, { \"value\": \"31\", \"label\": \"On Selection Change\" }, { \"value\": \"32\", \"label\": \"On Column Moved\" }, { \"value\": \"33\", \"label\": \"On"+"Column Resize\" }, { \"value\": \"34\", \"label\": \"On Row Moved\" }, { \"value\": \"35\", \"label\": \"On Mouse Enter\" }, { \"value\": \"36\", \"label\": \"On Mouse Leave\" }, { \"value\": \"37\", \"label\": \"On Mouse Move\" }, { \"value\": \"38\", \"label\": \"On Alternative Click\" }, "+"{ \"value\": \"39\", \"label\": \"On Long Click\" }, { \"value\": \"40\", \"label\": \"On Load Record\" }, { \"value\": \"41\", \"label\": \"On Before Data Entry\" }, { \"value\": \"42\", \"label\": \"On Header Click\" }, { \"value\": \"43\", \"label\": \"On Expand\" }, { \"value\": \"44\", \""+"bel\": \"On Collapse\" }, { \"value\": \"45\", \"label\": \"On After Edit\" }, { \"value\": \"46\", \"label\": \"On Begin Drag Over\" }, { \"value\": \"47\", \"label\": \"On Begin URL Loading\" }, { \"value\": \"48\", \"label\": \"On URL Resource Loading\" }, { \"value\": \"49\", \"label\": "+"\"On End URL Loading\" }, { \"value\": \"50\", \"label\": \"On URL Loading Error\" }, { \"value\": \"51\", \"label\": \"On URL Filtering\" }, { \"value\": \"52\", \"label\": \"On Open External Link\" }, { \"value\": \"53\", \"label\": \"On Window Opening Denied\" }, { \"value\": \"54\", \""+"label\": \"On Bound Variable Change\" }, { \"value\": \"55\", \"label\": \"_O_On Mac Toolbar Button\" }, { \"value\": \"56\", \"label\": \"On Page Change\" }, { \"value\": \"57\", \"label\": \"On Footer Click\" }, { \"value\": \"58\", \"label\": \"On Delete Action\" }, { \"value\": \"59\","+" \"label\": \"On Scroll\" } ] }, { \"groupname\": \"Field and Variable Types\", \"Constants\": [ { \"value\": \"0\", \"label\": \"Is alpha field\" }, { \"value\": \"1\", \"label\": \"Is real\" }, { \"value\": \"2\", \"label\": \"Is text\" }, { \"value\": \"3\", \"label\": \"Is picture\" }, { "+"\"value\": \"4\", \"label\": \"Is date\" }, { \"value\": \"5\", \"label\": \"Is undefined\" }, { \"value\": \"6\", \"label\": \"Is Boolean\" }, { \"value\": \"7\", \"label\": \"Is subtable\" }, { \"value\": \"8\", \"label\": \"Is integer\" }, { \"value\": \"9\", \"label\": \"Is longint\" }, { "+"e\": \"11\", \"label\": \"Is time\" }, { \"value\": \"13\", \"label\": \"Array 2D\" }, { \"value\": \"14\", \"label\": \"Real array\" }, { \"value\": \"15\", \"label\": \"Integer array\" }, { \"value\": \"16\", \"label\": \"LongInt array\" }, { \"value\": \"17\", \"label\": \"Date array\" }, {"+"lue\": \"18\", \"label\": \"Text array\" }, { \"value\": \"19\", \"label\": \"Picture array\" }, { \"value\": \"20\", \"label\": \"Pointer array\" }, { \"value\": \"21\", \"label\": \"String array\" }, { \"value\": \"22\", \"label\": \"Boolean array\" }, { \"value\": \"23\", \"label\": \"Is po"+"er\" }, { \"value\": \"24\", \"label\": \"Is string var\" }, { \"value\": \"25\", \"label\": \"Is integer 64 bits\" }, { \"value\": \"30\", \"label\": \"Is BLOB\" }, { \"value\": \"31\", \"label\": \"Blob array\" }, { \"value\": \"32\", \"label\": \"Time array\" }, { \"value\": \"35\", \"label"+"\"Is float\" }, { \"value\": \"38\", \"label\": \"Is object\" }, { \"value\": \"39\", \"label\": \"Object array\" }, { \"value\": \"255\", \"label\": \"Is JSON null\" } ] } ] }"	C_TEXT($vT_resFolder;$vT_constantsJsonPath;$vT_constantsJson)	$vT_resFolder:=Get 4D folder(Current resources folder)	DBG_Log ("Resource folder ["+$vT_resFolder+"]")		$vT_constantsJsonPath:=$vT_resFolder+"metadata"+<>DSEP+"constants.json"	DBG_Log ("Read json file at ["+$vT_constantsJsonPath+"]")	$vT_constantsJson:=FileToText ($vT_constantsJsonPath)		C_OBJECT($vO_constants)	$vO_constants:=JSON Parse($vT_constantsJson)		ARRAY TEXT(<>aT_eventNames;0)	ARRAY TEXT(<>aT_typeNames;0)	ARRAY LONGINT(<>aL_eventValues;0)	ARRAY LONGINT(<>aT_typeValues;0)		DBG_Log ("todo")End if   // weird number handling  //$vT_foom:="42"  //C_LONGINT($vL_woop)  //$vL_woop:=num($vT_foom)  // $vL_woop=42  //$vT_foom:="42.1"  //$vL_woop:=Num($vT_foom)  // $vL_woop=42  //$vL_woop:=int(num($vT_foom))  // $vL_woop=42DBG_Log ("--------------------------------------------------------")DBG_Log ("Test done")DBG_EndMethod 