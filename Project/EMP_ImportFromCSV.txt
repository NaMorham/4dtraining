//%attributes = {"lang":"en"} comment added and reserved by 4D.//Project Method: EMP_ImportFromCSV(vT_filename) -> LongInt////   Parameter        Type             Description//   vT_filename      Text       <-    The full path to a file to be read//   vL_numRecords    LongInt    ->    The number of employees read and added,//                                      otherwise 0 for failure////Description://   Expects data in the form output by the python script found here://    git clone https://github.com/NaMorham/Python_tests.git////Date        Init  Description//===============================================================================//02/05/2017   AH   Initial version.C_TEXT($1;$vT_filename)C_TEXT($vT_TextBuffer)C_LONGINT($0;$vL_numRecords)OK:=1$vL_numRecords:=0$vT_filename:=$1//ALERT("TODO: Read file, add to table")$vT_TextBuffer:=Document to text($vT_filename)If (Test path name($vT_filename)#Is a document)OK:=0End if If (OK=1)// Fix up stupid line endings <--- Grr Windows$vT_TextBuffer:=Replace string($vT_TextBuffer;"\r\n";"\n";*)$vT_TextBuffer:=Replace string($vT_TextBuffer;"\r";"\n";*)C_LONGINT($vL_recordNum;$vL_index)$vL_recordNum:=0// Parse the data twice (until I can figure out a lookup table or hash map)// 1st time: read and create recordsARRAY TEXT($aT_readLines;0)// TODO: find docs/code for the DICT functions// Track old vs' new UUIDS - tables must end up the same size// They are used to map an import UUID to the generated UUIDARRAY TEXT($aT_oldUUIDs;0)ARRAY TEXT($aT_newUUIDs;0)// Track old UUIDS and old manager UUIDS - cannot use the same new UUID as// above since not every user read can be assumed to have a managerARRAY TEXT($aT_needsManagerNewUUIDs;0)ARRAY TEXT($aT_managedByImportUUIDs;0)C_TEXT($vT_delim)$vT_delim:=""+Char(Line feed)$vL_numRecords:=GK_TextToArray ($vT_TextBuffer;$aT_readLines;$vT_delim)DebugLog ("Found ["+String($vL_numRecords)+"] in file ["+$vT_filename+"] for import")C_TEXT($vT_recordText;$vT_recDelim)C_LONGINT($vL_numFields)$vT_recDelim:=","For ($vL_index;1;$vL_numRecords)// Read the data from the "file"ARRAY TEXT($aT_newRecord;0)$vT_recordText:=$aT_readLines{$vL_index}$vL_numFields:=GK_TextToArray ($vT_recordText;$aT_newRecord;$vT_recDelim;kGK_TTA_USE_DEFAULT;10)If (($aT_newRecord{1}="") | StringBeginsWith ($aT_newRecord{1};"ID"))// empty or header - do nothingElse CREATE SET([Employee];"Current Selection")ALL RECORDS([Employee])// Import checks should always be against the full set of records// First, make sure the employee is not already thereQUERY([Employee];[Employee]Surname=$aT_newRecord{2};*)QUERY([Employee]; & ;[Employee]FirstName=$aT_newRecord{3};*)QUERY([Employee]; & ;[Employee]Mobile=$aT_newRecord{5};*)QUERY([Employee]; & ;[Employee]StartDate=ReverseDateStringToDate ($aT_newRecord{8}))C_TEXT($vT_newUUID)// Fields expected from the source file// ID,SURNAME,FIRST_NAME,EMAIL,MOBILE,IS_MANAGER,MANAGED_BY,START_DATE,END_DATE,PICTURECase of : (Records in selection([Employee])=0)DebugLog ("No existing record found, create new employee ["+String_EmployeeArrayShort (->$aT_newRecord)+"]")$vT_newUUID:=Generate UUIDDebugLog ("Assigned new UUID ["+$vT_newUUID+"] to import UUID ["+$aT_newRecord{1}+"]")CREATE RECORD([Employee])[Employee]ID:=$vT_newUUID[Employee]Surname:=$aT_newRecord{2}[Employee]FirstName:=$aT_newRecord{3}[Employee]Mobile:=$aT_newRecord{5}[Employee]StartDate:=ReverseDateStringToDate ($aT_newRecord{8}): (Records in selection([Employee])=1)DebugLog ("Existing record found, update employee ["+String_EmployeeArrayShort (->$aT_newRecord)+"]")$vT_newUUID:=[Employee]IDDebugLog ("Assigned existing UUID ["+$vT_newUUID+"] to import UUID ["+$aT_newRecord{1}+"]")Else C_TEXT($vT_errMessage)$vT_errMessage:="Employee [\n"$vT_errMessage:=$vT_errMessage+"\t   Name: "+Uppercase($aT_newRecord{2})+", "+$aT_newRecord{3}+"\n"$vT_errMessage:=$vT_errMessage+"\t Mobile: "+$aT_newRecord{5}+"\n"$vT_errMessage:=$vT_errMessage+"\tStarted: "+String(ReverseDateStringToDate ($aT_newRecord{8}))+"\n"$vT_errMessage:=$vT_errMessage+"] has ["+String(Records in selection([Employee]))+"] duplicates"ALERT($vT_errMessage)OK:=0$vL_numRecords:=0End case If (OK#0)// Preserve a mapping of the old and new UUID's - use 2 arrays so we can find the old and// use the found index to retrieve the new UUIDAPPEND TO ARRAY($aT_oldUUIDs;$aT_newRecord{1})APPEND TO ARRAY($aT_newUUIDs;$vT_newUUID)[Employee]Email:=$aT_newRecord{4}[Employee]IsManagerFg:=(Uppercase($aT_newRecord{6})="TRUE")// TODO: find a better way - string to bool// Still need an is UUID checkIf ((Length($aT_newRecord{7})#0) & ($aT_newRecord{7}#"00000000-0000-0000-0000-000000000000") & ($aT_newRecord{7}#"00000000000000000000000000000000"))// Has a manager, add the new UUID and the manager's old UUID// Done in 2 passes since the order of the entries read does// not promise that the manager has been previously parsedAPPEND TO ARRAY($aT_needsManagerNewUUIDs;$vT_newUUID)APPEND TO ARRAY($aT_managedByImportUUIDs;$aT_newRecord{7})End if If (Length($aT_newRecord{9})#0)[Employee]EndDate:=ReverseDateStringToDate ($aT_newRecord{9})End if SAVE RECORD([Employee])End if End if End for DebugLog ("Finishd import first pass")// 2nd time: Update manager relationshipsIf (Size of array($aT_newUUIDs)#Size of array($aT_oldUUIDs))ALERT("Size of new and old UUID lookup array do not match, not assigning managers from import file")OK:=1End if If (OK=1)DebugLog ("["+String(Size of array($aT_needsManagerNewUUIDs))+"] users need to be assigned managers")For ($vL_index;1;Size of array($aT_needsManagerNewUUIDs))// Users in this list have managers assigned in the import file, these users are referenced by the// import id's in $aT_oldUUIDs, because the $aT_newUUIDs have the generated UUID in the same index// a lookup can be perfomed and the new UUID of the correct manager can be assigned instead//$vL_recordNum:=Find in array($aT_needsManagerNewUUIDs{$vL_index};)//If (($vL_recordNum<1) | ($vL_recordNum>Size of array($aT_needsManagerNewUUIDs)))//  // Oh no, not found//DebugLog ("Could not find valid index for UUID ["+$aT_needsManagerNewUUIDs{$vL_index}+"], got ["+String($vL_recordNum)+"]")//Else //DebugLog ("Found record for UUID ["+$aT_needsManagerNewUUIDs{$vL_index}+"] at index ["+String($vL_recordNum)+"]")//End if DebugLog ("User [New UUID:"+$aT_needsManagerNewUUIDs{$vL_index}+"] needs to be assigned a manager")End for End if Else ALERT("Could not read file ["+$vT_filename+"]")OK:=0$vL_numRecords:=0End if // end - if document text readUSE SET("Current Selection")$0:=$vL_numRecords